Langage source : Python
Langage cible : Java

Etape :
    1.  Analyse lexical (regex)
    2.  Analyse syntaxique (ATS du langage sources)
    3.  Analyse sémantique (Type check)
    4.  Transformation ATS source en ATS cible
    5.  Génère code cible




======================GRAMMAIRE===============================
PROGRAM       -> STATEMENT*

STATEMENT     -> ASSIGNMENT ';'
               | EXPRESSION ';'
               | IF_STATEMENT
               | WHILE_STATEMENT
               | DEF_STATEMENT
               | RETURN_STATEMENT ';'

ASSIGNMENT    -> TYPE IDENTIFIER '=' EXPRESSION

IF_STATEMENT -> 'if' '(' BOOL_EXPR ')' (BLOCK | STATEMENT)
 					('else if' '(' BOOL_EXPR ')' (BLOCK | STATEMENT))*
					('else' (BLOCK | STATEMENT))?
WHILE_STATEMENT -> 'while' '(' BOOL_EXPR ')' (BLOCK | STATEMENT)


DEF_STATEMENT -> MODIFIERS? TYPE IDENTIFIER '(' PARAMS? ')' BLOCK
MODIFIERS -> ACCESS_MODIFIER? OTHER_MODIFIER*
ACCESS_MODIFIER -> 'public' | 'protected' | 'private'
OTHER_MODIFIER -> 'static' | 'final' | 'abstract' | 'synchronized' | 'native' | 'strictfp'



RETURN_STATEMENT -> 'return' EXPRESSION

BLOCK         -> '{' STATEMENT* '}'

PARAMS        -> TYPE IDENTIFIER (',' TYPE IDENTIFIER)*

EXPRESSION    -> TERM (('+' | '-') TERM)*

BOOL_EXPR     -> OR_EXPR
OR_EXPR       -> AND_EXPR ('||' AND_EXPR)*
AND_EXPR      -> NOT_EXPR ('&&' NOT_EXPR)*
NOT_EXPR      -> '!' NOT_EXPR
               | COMPARE

COMPARE       -> ADD_EXPR (COMPARE_OP ADD_EXPR)?
COMPARE_OP    -> '==' | '!=' | '<' | '<=' | '>' | '>='

TERM          -> FACTOR (('*' | '/' | '%') FACTOR)*
FACTOR        -> NUMBER
               | STRING
               | IDENTIFIER
               | BOOLEAN
               | '(' EXPRESSION ')'
               | FUNCTION_CALL

FUNCTION_CALL -> IDENTIFIER '(' ARGS? ')'
ARGS          -> EXPRESSION (',' EXPRESSION)*

TYPE          -> 'int' | 'float' | 'double' | 'boolean' | 'String' | IDENTIFIER ('[' ']')*

IDENTIFIER    -> [a-zA-Z_][a-zA-Z0-9_]*
NUMBER        -> DIGITS ('.' DIGITS)?
STRING        -> '"' ( [^"\n\\] | '\\' . )* '"'
               | '\'' ( [^'\n\\] | '\\' . )* '\''
BOOLEAN       -> 'true' | 'false'
DIGITS        -> [0-9]+